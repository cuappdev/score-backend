from bson.objectid import ObjectId
from src.database import db


class Team:
    """
    A model representing a team.

    Attributes:
        - `id`: The ID of the team (auto-generated by MongoDB).
        - `color`: The color of the team.
        - `image`: The image of the team.
        - `name`: The name of the team.
    """

    def __init__(self, **kwargs):
        id = kwargs.get("_id")
        self.id = id if id else str(ObjectId())
        self.color = kwargs.get("color")
        self.image = kwargs.get("image")
        self.name = kwargs.get("name")

    def to_dict(self):
        """
        Converts the Team object to a dictionary format for MongoDB storage.
        """
        return {
            "_id": self.id,
            "color": self.color,
            "image": self.image,
            "name": self.name,
        }

    @staticmethod
    def from_dict(data):
        """
        Converts a MongoDB document to a Team object.
        """
        return Team(
            _id=data.get("_id"),
            color=data.get("color"),
            image=data.get("image"),
            name=data.get("name"),
        )

    @staticmethod
    def get_all_teams():
        """
        Retrieve all teams from the 'team' collection in MongoDB.
        """
        team_collection = db["team"]
        teams = team_collection.find()
        return [Team.from_dict(team) for team in teams]

    @staticmethod
    def insert_team(team):
        """
        Inserts a new team into the 'team' collection in MongoDB.
        """
        team_collection = db["team"]
        team_collection.insert_one(team.to_dict())

    @staticmethod
    def get_team_by_id(team_id):
        """
        Fetch a team from the MongoDB collection by its ID.
        """
        team_collection = db["team"]
        team_data = team_collection.find_one({"_id": team_id})
        if not team_data:
            return None
        return Team.from_dict(team_data)
